---
echo: false
---
```{python}
%load_ext autoreload
%autoreload 2
```
just need functions structured in a graph
and mappings bw them.
that's it!
```{python}
from icecream import ic, install
install(); del install;
ic.configureOutput(outputFunction=print) 
import pyigr.core.core as pg
import networkx as nx
g = nx.MultiDiGraph()
from typing import Annotated

Annotated[int, 'sdf' ].__metadata__
g.add_edge('a', '')
g.add_node(3)
def f(a: Annotated[int, 'x'], b: Annotated[int, 'y']) -> Annotated[str, 'z']: return a+b
def noarg()-> Annotated[int, 'r']: return 3

def tz(a: Annotated[int, 'tx'], ) -> Annotated[str, 'tz']: return a*3
def tz2(a: Annotated[int, 'tz'], ) -> Annotated[str, 'z']: return a*3

def _()-> 1: return 3
p = pg.PG()
#list(p.values())
p.add_f(f)
p.add_f(tz)
p.add_f(tz2)
p[('x', 'y')] = (10,20)
#p[('x', 'y')]
(p) 
#list(p) 
#list(p) 
#dict(zip(p.keys(),p.values()))
```
```{python}
from pyigr.core import query as pq
q = ( (pq.Node() > pq.Node('z'))   ).query
#q = (pq.Node() > pq.Node()).query

print(
*((_) for _ in  q(p))
,sep='\n',
)
```
