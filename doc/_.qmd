---
echo: false
---
```{python}
%load_ext autoreload
%autoreload 2
```
just need functions structured in a graph
and mappings bw them.
that's it!
```{python}
import pyigr.core as pg
import networkx as nx
g = nx.MultiDiGraph()
from typing import Annotated

Annotated[int, 'sdf' ].__metadata__
g.add_edge('a', '')
g.add_node(3)
def f(a: Annotated[int, 'x'], b: Annotated[int, 'y']) -> Annotated[str, 'z']: ...
def noarg()-> Annotated[int, 'r']: return 3
def of(a: Annotated[int, 'ox'], ) -> Annotated[str, 'oz']: ...

def _()-> 1: return 3
p = pg.PG()
#p['x'] = 10 
#list(p.values())
p.add_f(of) 
p.add_f(of)
#(list(p))
#dict(zip(p.keys(),p.values()))
#p[()]
#list(p)
```
